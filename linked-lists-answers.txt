What are some pros and cons of using linked lists instead of arrays?

Pros: They can grow to immense sizes and can handle larger amounts of data.

Cons: inefficient access an element within the list because each node many exist anywhere within the physical memory.

Come up with a real world example of a linked list.

The history section of web browsers--it creates a linked list of web-pages visited, so that when you check history or press back button, the previous node's data is fetched.

The linked list push function should take a value,
create a node, and add it to the end of a list.
Below is pseudocode for a push function for a singly linked list.
However, there is something wrong with it.
Submit both an explanation of the bug and a functional implementation of the method.

FUNCTION push(element)
  CREATE node
  SET node.value TO element
  SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION

Instead: Since a Linked List is typically represented by the head of it, we have to traverse the list till end and then change the next of last node to new node.

FUNCTION push(element)
  CREATE node
    SET node.value TO element
    SET node.next TO null

  IF the head node does not exist
    THEN SET head to null
    WHILE node.next = null
    Set Node = Node.next
    Return Node.next = new.Node
  END IF
END FUNCTION

Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

function LinkedList(){
    this.head = null;
}

LinkedList.prototype = {
    insert:function(val){
        var item = {
            value:val,
            next:null
        }

        if (this.head == null){
            this.head = item;
            return;
        }else{
            current = this.head;
            while(current.next != null){
                current = current.next;
            }// end of while
            current.next = item;
        }
    },


    showAllElements:function(){
        if (this.head == null) return;
        var current = this.head, i = 1;
        while(current.next != null){
            console.log('The element at position ' + i + ' has value ' + current.value);
            current = current.next;
            i++;
        }

        console.log('The element at position ' + i + ' has value ' + current.value);
     }



}
function setup(){
        var list = new LinkedList();

        list.insert(3);
        list.insert(3);
        list.insert(2);
        list.insert(5);
        list.insert(4);
        list.insert(5);


        var current = list.head, arr = [], prev,next;

        while(current.next != null){
            if (arr.indexOf(current.value) == -1){
                arr.push(current.value);
            }else{
                if (prev){
                    prev.next = current.next;
                }
            }
            prev = current;
            current  = current.next;
        }


        if (current.next == null){
            if (arr.indexOf(current.value) != -1){
                prev.next = null;
            }
        }

        list.showAllElements();
    }
console.log(setup());


Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

function LinkedList(){
    this.head = null;
}

LinkedList.prototype = {
    insert:function(val){
        var item = {
            value:val,
            next:null
        }

        if (this.head == null){
            this.head = item;
            return;
        }else{
            current = this.head;
            while(current.next != null){
                current = current.next;
            }// end of while
            current.next = item;
        }
    }
}

function reverse(head) {
    new_head = head;
    old_head = head.next;
    new_head.next = null; // Terminate cycle.
    while (old_head) {
        current = old_head;
        old_head = old_head.next;
        current.next = new_head;
        new_head = current;
    }
    return new_head;
}

function node(val) {
    this.val = val;
    this.next = null;
}


a = new node("a");
b = new node("b");
c = new node("c");

a.next = b; b.next = c;
a = reverse(a);

console.log(c);
